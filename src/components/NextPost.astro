---
import { getCollection } from "astro:content";
import { getImage } from "astro:assets";
import Prose from "./Prose.astro";
import { loadImage } from "../scripts/loadImages";
import type { CollectionKey } from "astro:content";

export interface Props {
  currentSlug?: string;
  collection: CollectionKey;
}

const { currentSlug, collection } = Astro.props;

const allPosts = await getCollection(collection);
const otherPosts = allPosts.filter(
  (post) =>
    post.slug !== currentSlug && post.id.startsWith(`${Astro.currentLocale}/`),
);

const shouldRender = otherPosts.length > 0;

async function optimizeImage(src: ImageMetadata, alt: string) {
  return await getImage({
    src,
    alt,
    width: 640,
    height: 360,
    format: "avif",
    quality: 65,
    decoding: "async",
  });
}

const postsData = await Promise.all(
  otherPosts.map(async (post) => {
    const resolvedImage = await loadImage(post.data.image.src);

    const imageData = post.data.image
      ? await optimizeImage(
          resolvedImage.default,
          post.data.image.alt || post.data.title,
        )
      : null;
    return {
      slug: post.slug,
      slugPrefix: post.data.slugPrefix,
      title: post.data.title,
      description: post.data.description,
      image: imageData ? imageData.src : null,
      alt: post.data.image?.alt || post.data.title,
    };
  }),
);

// TODO favicon
const favicon = await optimizeImage(
  "https://cdn.erfianugrah.com/ea_favicon.png",
  "favicon",
);
---

{
  shouldRender && (
    <Prose>
      <div class="flex justify-center mb-6 mt-20">
        <svg
          class="w-14 h-4 text-gray-700 dark:text-gray-300"
          viewBox="0 0 60 20"
          xmlns="http://www.w3.org/2000/svg"
        >
          <circle cx="10" cy="10" r="6" fill="currentColor" />
          <circle cx="30" cy="10" r="6" fill="currentColor" />
          <circle cx="50" cy="10" r="6" fill="currentColor" />
        </svg>
      </div>
      <div class="mt-4 overflow-x-auto md:overflow-x-visible -mx-8 px-8 md:mx-0 md:px-0">
        <div
          id="randomPosts"
          class="flex md:grid md:grid-cols-3 gap-4 pb-12 md:pb-0"
          style="min-width: min-content;"
          data-posts={JSON.stringify(postsData)}
          data-collection={collection}
          data-favicon={JSON.stringify({
            src: favicon.src,
            width: favicon.attributes.width,
            height: favicon.attributes.height,
          })}
        >
          {[...Array(3)].map((_, index) => (
            <a
              href="#"
              class="no-underline block flex-shrink-0 w-56 md:w-full post-item"
              style="display: none;"
            >
              <div class="rounded-lg overflow-hidden shadow-md transition-all duration-300 hover:shadow-xl bg-gray-100 dark:bg-[rgb(44,43,47)] h-full flex flex-col group">
                <div class="p-2 md:p-4 flex-grow flex flex-col relative">
                  <div class="absolute inset-0 bg-gray-200 dark:bg-[rgb(54,53,57)] opacity-0 group-hover:opacity-100 transition-opacity duration-300" />
                  <div class="aspect-video mb-2 md:mb-4 overflow-hidden rounded relative z-10 flex items-center justify-center bg-gray-200 dark:bg-gray-700">
                    <img
                      src=""
                      alt=""
                      class="w-full h-full object-cover transition-all duration-300 group-hover:opacity-90"
                      loading="lazy"
                      decoding="async"
                    />
                  </div>
                  <h3 class="text-sm md:text-lg font-semibold mb-1 md:mb-2 font-overpass-mono text-gray-900 dark:text-[rgb(245,245,245)] relative z-10 line-clamp-2" />
                  <p class="text-xs md:text-sm line-clamp-2 font-inconsolata flex-grow text-gray-700 dark:text-[rgb(230,230,230)] relative z-10" />
                </div>
              </div>
            </a>
          ))}
        </div>
      </div>
    </Prose>
  )
}

<script>
  function shuffleArray(array: any[]) {
    for (let i = array.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [array[i], array[j]] = [array[j], array[i]];
    }
    return array;
  }

  function updatePosts() {
    const container = document.getElementById("randomPosts");
    if (!container) return;

    const posts = JSON.parse(container.dataset.posts || "[]");
    const collection = container.dataset.collection;
    const favicon = JSON.parse(container.dataset.favicon || "{}");

    const shuffledPosts = shuffleArray([...posts]);
    const selectedPosts = shuffledPosts.slice(0, 3);

    const postElements: NodeListOf<HTMLAnchorElement> =
      container.querySelectorAll(".post-item");
    selectedPosts.forEach((post, index) => {
      const element: HTMLAnchorElement = postElements[index];
      if (element) {
        // Get the current path and extract the locale
        const pathParts = window.location.pathname.split("/");
        const currentLocale = pathParts[1];
        const localePrefix =
          currentLocale === "en" ? `/${currentLocale}/` : "/";

        element.href = `${localePrefix}${collection}/${post.slugPrefix ? post.slugPrefix + "/" : ""}${post.slug}/`;
        element.style.display = "block";

        const img = element.querySelector("img");
        if (img) {
          img.src = post.image || favicon.src;
          img.alt = post.alt;
          img.className = post.image
            ? "w-full h-full object-cover transition-all duration-300 group-hover:opacity-90"
            : "w-16 h-16 md:w-24 md:h-24 transition-all duration-300 group-hover:opacity-90";
        }

        const title = element.querySelector("h3");
        if (title) {
          title.textContent = post.title;
        }

        const description = element.querySelector("p");
        if (description) {
          description.textContent = post.description;
        }
      }
    });
  }
  document.addEventListener("astro:page-load", () => {
    updatePosts();
  });
</script>
