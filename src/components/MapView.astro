---
interface Props {
  style: string;
  center?: number[];
  zoom?: number;
}
const { ...props } = Astro.props;
---

<div
  id={props.style?.substring(props.style?.lastIndexOf("/")) ?? "map"}
  style="width: 100%; height: 300px;"
>
</div>
<link
  href="https://api.mapbox.com/mapbox-gl-js/v3.7.0/mapbox-gl.css"
  rel="stylesheet"
/>

<script is:inline define:vars={{ props }}>
  function loadMapboxGL() {
    return new Promise((resolve, reject) => {
      const script = document.createElement("script");
      script.src = "https://api.mapbox.com/mapbox-gl-js/v3.7.0/mapbox-gl.js";
      script.onload = resolve;
      script.onerror = reject;
      document.head.appendChild(script);
    });
  }

  async function initializeMap() {
    await loadMapboxGL();

    mapboxgl.accessToken =
      "pk.eyJ1Ijoid2h5dHJhdmVsIiwiYSI6ImNtMm5tejh3MTA4cXAyanNiODJleDZkbXoifQ.9baGbOSOZzmq3HG5WHBDuA";

    const container =
      props.style?.substring(props.style?.lastIndexOf("/")) ?? "map";
    const mapConfig = {
      container,
      style: props.style,
    };

    if (props.center) {
      mapConfig.center = props.center;
    }

    if (props.zoom) {
      mapConfig.zoom = props.zoom;
    }

    const map = new mapboxgl.Map(mapConfig);
  }

  document.addEventListener("astro:page-load", () => {
    initializeMap();
  });
</script>
