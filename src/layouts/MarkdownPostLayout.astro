---
import BaseLayout from "./BaseLayout.astro";
import "@styles/glightbox.css";
import Prose from "@components/Prose.astro";
import { getImage } from "astro:assets";
import HeroImage from "@components/HeroImage.tsx";
import NextPost from "@components/NextPost.astro";
import { loadImage } from "../scripts/loadImages";
import type { CollectionEntry } from "astro:content";
import type { CollectionKey } from "astro:content";
import { getEntry } from "astro:content";

export interface Props {
  collection: CollectionKey;
  entry: CollectionEntry<"posts">;
}

const { entry, collection } = Astro.props;
const updatedDate = entry.data?.updatedDate
  .toDateString()
  .split(" ")
  .slice(1)
  .join(" ");
const publishedDate = entry.data?.pubDate
  .toDateString()
  .split(" ")
  .slice(1)
  .join(" ");
const title = entry.data?.title;
const description = entry.data?.description;
const authorFullName = entry.data?.author;
const author = authorFullName?.split(" ")?.[0]?.toLowerCase();

const resolvedImage = await loadImage(entry.data.image?.src);

const alt = entry.data.image?.alt;
const positionx = entry.data?.image?.positionx;
const positiony = entry.data?.image?.positiony;
let baseUrl = new URL(Astro.request.url).origin;

const category = await getEntry(entry.data.category);

const href = `posts/${entry.data.slugPrefix}/${entry.id}`;
const alternateHref = `posts/${entry.alternateLanguage.data.slugPrefix}/${entry.alternateLanguage.id}`;

const backgroundImage = resolvedImage
  ? await getImage({
      src: resolvedImage.default,
      alt: alt,
      width: "3840",
      height: "2160",
      decoding: "async",
      format: "avif",
    })
  : null;

const mobileBackgroundImage = resolvedImage
  ? await getImage({
      src: resolvedImage.default,
      alt: alt,
      width: "1920",
      height: "1080",
      decoding: "async",
      format: "avif",
      quality: "65",
    })
  : null;

const metaImage = resolvedImage
  ? await getImage({
      src: resolvedImage.default,
      alt: alt,
      width: "1280",
      height: "720",
      decoding: "async",
      format: "webp",
      loading: "lazy",
    })
  : null;
---

<BaseLayout
  title={title}
  image={resolvedImage ? `${baseUrl}${metaImage?.src}` : ""}
  alt={alt ? metaImage?.attributes.alt : ""}
  description={description}
  author={author}
  pubDate={updatedDate}
  updatedDate={publishedDate}
  is404Page={false}
  href={href}
  alternateHref={alternateHref}
>
  {
    resolvedImage ? (
      <HeroImage
        client:load
        title={title}
        tags={entry.data.tags}
        category={category.data.title}
        backgroundImage={backgroundImage.src}
        mobileBackgroundImage={mobileBackgroundImage.src}
        positionX={positionx}
        positionY={positiony}
        alt={alt}
      />
    ) : (
      <div data-pagefind-body>
        <Prose>
          <h1 class="normal-case font-overpass-mono text-4xl -mb-1 mt-4">
            {title}
          </h1>
          <div class="flex">
            {entry.data.tags.map((tag: string) => (
              <p class="font-overpass-mono text-xl">
                <a
                  class="bg-slate-600 text-[rgb(245,245,245)] bg-opacity-50 px-2 py-1 rounded no-underline"
                  href={`../tags/${tag}`}
                >
                  {tag}
                </a>
              </p>
            ))}
          </div>
        </Prose>
      </div>
    )
  }
  <div data-pagefind-body>
    <Prose>
      <slot />
      <div class="flex flex-col sm:flex-row align-center">
        <div class="w-full flex-col sm:w-1/2 text-center sm:text-left">
          <p>
            -- <a
              href={`/authors/${author}`}
              class="no-underline font-inconsolata"
            >
              {authorFullName}
            </a>
          </p>
        </div>
        <div
          class="w-full flex-col sm:w-1/2 text-left sm:text-right mt-[10px] dark:text-white text-black font-inconsolata"
        >
          <div>
            Published: {publishedDate}
          </div>
          <div>
            Updated: {updatedDate}
          </div>
        </div>
      </div>
    </Prose>
  </div>
  <NextPost currentSlug={entry.id} collection={collection} />
</BaseLayout>

<style>
  @keyframes fadeIn {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }

  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .fade-in {
    opacity: 0;
    animation: fadeIn 1s ease-out forwards;
  }

  .fade-in-up {
    opacity: 0;
    animation: fadeInUp 1s ease-out forwards;
  }

  .delay-300 {
    animation-delay: 300ms;
  }

  .delay-600 {
    animation-delay: 600ms;
  }
</style>
